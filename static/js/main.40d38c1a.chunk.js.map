{"version":3,"sources":["utils/Helper.ts","utils/Scroller.ts","components/ScrollStepComponent.tsx","components/TimeLineComponent.tsx","components/ScrollComponent.tsx","components/InteractiveMap.tsx","components/WelcomeComponent.tsx","App.tsx","report-web-vitals.ts","index.tsx"],"names":["prevAll","element","result","previousElementSibling","push","districts","scroller","observers","observer","this","observerToRemove","filter","district","notify","forEach","ScrollStepComponent","useState","getDistrict","setDistrict","getState","setState","useEffect","onScrollStateChange","label","document","querySelector","steps","childNodes","getElementById","e","classList","replace","add","slice","onStateChange","attach","detach","addEventListener","id","className","map","value","index","offset","documentElement","clientHeight","to","smooth","spy","_","DistrictComponent","el","onHover","ScrollComponent","props","initialState","data","progress","setGetState","state","style","display","onStepEnter","onStepExit","direction","order","onStepProgress","mapComponent","InteractiveMap","hoverCountryStyle","fillColor","fillOpacity","color","weight","MapContainer","zoom","height","width","center","scrollWheelZoom","dragging","keyboard","GeoJSON","regierungsbezirke","onEachFeature","feature","layer","name","properties","NAME_2","bindPopup","on","mouseover","event","target","setStyle","openPopup","mouseout","closePopup","WelcomeComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.40d38c1a.chunk.js","sourcesContent":["export const prevAll = (element: HTMLDivElement): HTMLDivElement[] => {\n    const result: HTMLDivElement[] = [];\n\n    while ((element = element.previousElementSibling as HTMLDivElement)) result.push(element);\n    return result;\n};\n\nexport const districts = [\n    \"Mittelfranken\",\n    \"Niederbayern\",\n    \"Oberbayern\",\n    \"Oberfranken\",\n    \"Oberpfalz\",\n    \"Schwaben\",\n    \"Unterfranken\",\n];\n","export type ScrollerObserver = (district: string) => void;\n\nclass Scroller {\n    private observers: ScrollerObserver[] = [];\n\n    public attach(observer: ScrollerObserver) {\n        this.observers.push(observer);\n    }\n\n    public detach(observerToRemove: ScrollerObserver) {\n        this.observers = this.observers.filter((observer) => observerToRemove !== observer);\n    }\n\n    public onScrollStateChange(district: string) {\n        this.notify(district);\n    }\n\n    private notify(district: string) {\n        this.observers.forEach((observer) => observer(district));\n    }\n}\n\nconst scroller = new Scroller();\nexport default scroller;\n","import \"../style/ScrollStepComponent.scss\";\nimport { useEffect, useState } from \"react\";\nimport { districts, prevAll } from \"../utils/Helper\";\nimport scroller, { ScrollerObserver } from \"../utils/Scroller\";\nimport { Link } from \"react-scroll\";\n\nconst ScrollStepComponent = (): JSX.Element => {\n    const [getDistrict, setDistrict] = useState<string>(\"\");\n    const [getState, setState] = useState<string>(\"\");\n\n    useEffect(() => {\n        scroller.onScrollStateChange(getState);\n    }, [getDistrict, getState]);\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".left\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n\n        const element: HTMLDivElement = document.getElementById(getState) as HTMLDivElement;\n\n        if (element !== null) {\n            steps.forEach((e: HTMLDivElement) => {\n                e.classList.replace(\"current\", \"prev\");\n            });\n\n            element.classList.add(\"current\");\n            prevAll(element)\n                .slice(1)\n                .forEach((e) => e.classList.add(\"prev\"));\n        }\n    }, [getState]);\n\n    const onStateChange: ScrollerObserver = (district: string) => {\n        setState(district);\n    };\n\n    useEffect(() => {\n        scroller.attach(onStateChange);\n        return () => scroller.detach(onStateChange);\n    });\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".left\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n\n        steps.forEach((element: HTMLDivElement) =>\n            element.addEventListener(\"click\", () => {\n                setDistrict(element.id);\n            })\n        );\n    });\n\n    return (\n        <div className={\"outer\"}>\n            <div className={\"progress\"}>\n                <div className={\"left\"}>\n                    {districts.map((value: string, index: number) => {\n                        const offset = -document.documentElement.clientHeight * 0.21;\n                        if (index === 1) {\n                            return (\n                                <div id={value} className={\"current\"}>\n                                    <Link to={value + \"-view\"} smooth={true} spy={true} offset={offset}>\n                                        {value}\n                                    </Link>\n                                </div>\n                            );\n                        } else {\n                            return (\n                                <div id={value} className={\"current\"}>\n                                    <Link to={value + \"-view\"} smooth={true} spy={true} offset={offset}>\n                                        {value}\n                                    </Link>\n                                </div>\n                            );\n                        }\n                    })}\n                </div>\n                <div className={\"right\"}>\n                    {districts.map((_, index: number) => {\n                        return <div key={index} />;\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollStepComponent;\n","import \"../style/TimeLineComponent.scss\";\nimport { useEffect } from \"react\";\nimport { prevAll } from \"../utils/Helper\";\n\nconst DistrictComponent = (): JSX.Element => {\n    const onHover = (el: HTMLDivElement, steps: HTMLDivElement[]): void => {\n        steps.forEach((element: HTMLDivElement) => {\n            element.classList.replace(\"current\", \"prev\");\n        });\n        el.classList.add(\"current\");\n        prevAll(el)\n            .slice(1)\n            .forEach((element) => element.classList.add(\"prev\"));\n    };\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".timeline-progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".below\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n        steps.forEach((element: HTMLDivElement) =>\n            element.addEventListener(\"click\", () => {\n                onHover(element, steps);\n            })\n        );\n    });\n\n    return (\n        <div className={\"timeline-outer\"}>\n            <div className={\"timeline-progress\"}>\n                <div className={\"above\"}>\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                </div>\n                <div className={\"below\"}>\n                    <div className={\"current\"}>\n                        <p>1980</p>\n                    </div>\n                    <div>\n                        <p>1984</p>\n                    </div>\n                    <div>\n                        <p>1988</p>\n                    </div>\n                    <div>\n                        <p>1992</p>\n                    </div>\n                    <div>\n                        <p>1996</p>\n                    </div>\n                    <div>\n                        <p>2000</p>\n                    </div>\n                    <div>\n                        <p>2004</p>\n                    </div>\n                    <div>\n                        <p>2008</p>\n                    </div>\n                    <div>\n                        <p>2012</p>\n                    </div>\n                    <div>\n                        <p>2016</p>\n                    </div>\n                    <div>\n                        <p>2020</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DistrictComponent;\n","import { useEffect, useState } from \"react\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport ScrollStepComponent from \"./ScrollStepComponent\";\nimport \"../style/ScrollComponent.scss\";\nimport TimeLineComponent from \"./TimeLineComponent\";\nimport scroller, { ScrollerObserver } from \"../utils/Scroller\";\nimport { districts } from \"../utils/Helper\";\n\ninterface IState {\n    data: string;\n    steps: string[];\n    progress: number;\n}\n\nconst ScrollComponent = (props: { mapComponent: JSX.Element }): JSX.Element => {\n    const initialState: IState = {\n        data: \"\",\n        steps: districts,\n        progress: 0,\n    };\n\n    const [getState, setGetState] = useState<IState>(initialState);\n\n    const onStateChange: ScrollerObserver = (district: string) => {\n        setGetState((state: IState) => {\n            return { ...state, data: district };\n        });\n    };\n\n    useEffect(() => {\n        scroller.attach(onStateChange);\n        return () => scroller.detach(onStateChange);\n    });\n\n    const onStepEnter = (e) => {\n        const { data } = e;\n        scroller.onScrollStateChange(data);\n    };\n\n    const onStepExit = ({ direction, data }) => {\n        if (direction === \"up\" && data === getState.steps[0]) {\n            setGetState((state: IState) => {\n                return { ...state, data: \"\" };\n            });\n        }\n    };\n\n    const onStepProgress = ({ progress }) => {\n        setGetState((state: IState) => {\n            return { ...state, progress: progress };\n        });\n    };\n\n    return (\n        <div>\n            <div id={\"main-component\"} style={{ display: \"block\" }}>\n                <div className=\"graphic-container\">\n                    <div className=\"district\">\n                        <ScrollStepComponent />\n                    </div>\n                    <div className=\"scroller\">\n                        <Scrollama\n                            onStepEnter={onStepEnter}\n                            onStepExit={onStepExit}\n                            progress\n                            order\n                            onStepProgress={onStepProgress}\n                            offset=\"0.23\"\n                        >\n                            {getState.steps.map((value: string) => {\n                                return (\n                                    <Step data={value} key={value}>\n                                        <div id={value + \"-view\"} className={\"step\"}>\n                                            <p>{value}</p>\n                                        </div>\n                                    </Step>\n                                );\n                            })}\n                        </Scrollama>\n                    </div>\n                    <div className=\"graphic\">\n                        <div className=\"map\">{props.mapComponent}</div>\n                    </div>\n                </div>\n                <div id={\"timeline-component\"} className=\"timeline\">\n                    <TimeLineComponent />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollComponent;\n","import regierungsbezirke from \"../data/regierungsbezirke.json\";\nimport { MapContainer, GeoJSON } from \"react-leaflet\";\nimport { Feature, GeoJsonObject } from \"geojson\";\nimport { Layer, LeafletEvent } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\ninterface ICountryStyle {\n    fillColor: string;\n    fillOpacity: number;\n    color: string;\n    weight: number;\n}\n\nconst InteractiveMap: () => JSX.Element = () => {\n    const defaultCountryStyle: ICountryStyle = {\n        fillColor: \"red\",\n        fillOpacity: 0.5,\n        color: \"white\",\n        weight: 1,\n    };\n    const hoverCountryStyle: ICountryStyle = {\n        fillColor: \"red\",\n        fillOpacity: 1,\n        color: \"white\",\n        weight: 3,\n    };\n\n    const onEachFeature = (feature: Feature, layer: Layer): void => {\n        const name = feature.properties?.NAME_2;\n        layer.bindPopup(name);\n        layer.on({\n            mouseover: (event: LeafletEvent) => {\n                event.target.setStyle(hoverCountryStyle);\n                layer.openPopup();\n            },\n            mouseout: (event: LeafletEvent) => {\n                event.target.setStyle({\n                    fillColor: \"red\",\n                    fillOpacity: 0.5,\n                    color: \"white\",\n                    weight: 1,\n                });\n                layer.closePopup();\n            },\n        });\n    };\n\n    return (\n        <MapContainer\n            zoom={7}\n            style={{ height: \"100%\", width: \"100%\" }}\n            center={[48.7, 12]}\n            scrollWheelZoom={false}\n            dragging={false}\n            keyboard={false}\n        >\n            <GeoJSON\n                style={defaultCountryStyle}\n                data={regierungsbezirke as GeoJsonObject}\n                onEachFeature={onEachFeature}\n            />\n        </MapContainer>\n    );\n};\n\nexport default InteractiveMap;\n","import \"../style/WelcomeComponent.scss\";\nimport { Link } from \"react-scroll\";\n\nconst WelcomeComponent = (): JSX.Element => {\n    return (\n        <div className={\"welcome\"}>\n            <div className={\"title-container\"}>\n                <p className={\"title\"}>Betonwüste</p>\n                <p className={\"subtitle\"}>Flächenverbrauch Bayerns in Zahlen</p>\n            </div>\n            <Link to={\"main-component\"} smooth={true} spy={true}>\n                <div className={\"mouse-scroll\"}>\n                    <div className={\"mouse\"}>\n                        <div className={\"mouse-in\"} />\n                    </div>\n                    <div>\n                        <span className={\"down-arrow-1\"} />\n                        <span className={\"down-arrow-2\"} />\n                        <span className={\"down-arrow-3\"} />\n                    </div>\n                </div>\n            </Link>\n        </div>\n    );\n};\n\nexport default WelcomeComponent;\n","import ScrollComponent from \"./components/ScrollComponent\";\nimport InteractiveMap from \"./components/InteractiveMap\";\nimport WelcomeComponent from \"./components/WelcomeComponent\";\n\nfunction App(): JSX.Element {\n    return (\n        <>\n            <WelcomeComponent />\n            <ScrollComponent mapComponent={<InteractiveMap />} />\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./report-web-vitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}