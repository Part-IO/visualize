{"version":3,"sources":["utils/Helper.ts","utils/Colors.ts","utils/Scroller.ts","components/ScrollStepComponent.tsx","components/TimeLineComponent.tsx","components/ScrollComponent.tsx","utils/DataLoader.ts","components/InteractiveMap.tsx","components/WelcomeComponent.tsx","App.tsx","report-web-vitals.ts","index.tsx"],"names":["LayerTypes","prevAll","element","result","previousElementSibling","push","districts","Colors","scroller","observers","observer","this","observerToRemove","filter","district","notify","forEach","ScrollStepComponent","useState","getDistrict","setDistrict","getState","setState","useEffect","onScrollStateChange","label","document","querySelector","steps","childNodes","getElementById","e","classList","replace","add","slice","onStateChange","attach","detach","addEventListener","id","className","map","value","index","offset","documentElement","clientHeight","to","smooth","spy","_","DistrictComponent","el","onHover","ScrollComponent","props","initialState","data","progress","setGetState","state","style","display","onStepEnter","onStepExit","direction","order","onStepProgress","mapComponent","GroupBy","municipality","AGS","groupBy","key","array","reduce","objectsByKeyValue","obj","concat","DataLoader","groupByKey","groupByKeyFunction","GetDistricts","entry","toString","length","getDataForYear","year","GetDataForYear","GetGovernmentDistricts","governmentDistricts","GetAll","dataSet","tempData","groupByYearFunction","Object","keys","find","input","parts","match","Date","Number","parseDate","getFullYear","extend","mixPlugin","getTint","color","percentage","p","colord","tints","c","toHex","reverse","Math","round","InteractiveMap","regierungsbezirke","getRBGeoJson","GeoContainer","geoJsonRef","useRef","useMap","groupByAGSFunc","getDataRB","getDataLK","useMemo","minValue","Infinity","maxValue","values","flat","dataEntry","used_area_percent","minRB","maxRB","minLK","maxLK","colorize","useCallback","feature","layer","Regierungsbezirk","getData","parseInt","properties","Red","fillColor","fillOpacity","White","weight","lastClickedLayer","lastDetailedLayerGroup","onEachFeature","t","on","click","event","geoJsonMapObj","current","resetStyle","removeLayer","Landkreis","flyToBounds","getBounds","duration","easeLinearity","padding","paddingBottomRight","undefined","Browser","ie","opera","edge","target","bringToBack","setStyle","Black","firstNum","newGeoJsonLK","type","features","landkreise","f","trunc","newGeoJsonLayer","L","GeoJSON","fea","l","layerGroup","LayerGroup","addTo","addLayer","bringToFront","ref","MapContainer","zoomSnap","zoomDelta","zoom","center","height","width","background","border","borderRadius","backgroundClip","whenCreated","m","fitBounds","invalidateSize","zoomAnimation","fadeAnimation","WelcomeComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f24c2635.chunk.js","sourcesContent":["export const prevAll = (element: HTMLDivElement): HTMLDivElement[] => {\n    const result: HTMLDivElement[] = [];\n\n    while ((element = element.previousElementSibling as HTMLDivElement)) result.push(element);\n    return result;\n};\n\nexport const parseDate = (input: string): Date => {\n    const parts = input.match(/(\\d+)/g) as RegExpMatchArray;\n    // note parts[1]-1\n    return new Date(Number(parts[2]), Number(parts[1]) - 1, Number(parts[0]));\n};\n\nexport const districts = [\n    \"Mittelfranken\",\n    \"Niederbayern\",\n    \"Oberbayern\",\n    \"Oberfranken\",\n    \"Oberpfalz\",\n    \"Schwaben\",\n    \"Unterfranken\",\n];\n\nexport enum LayerTypes {\n    Regierungsbezirk,\n    Landkreis,\n}\n","import { colord, extend } from \"colord\";\nimport mixPlugin from \"colord/plugins/mix\";\n\nextend([mixPlugin]);\n\nexport enum Colors {\n    Pink = \"#ff2d55\",\n    Purple = \"#5856d6\",\n    Orange = \"#ff9500\",\n    Yellow = \"#ffcc00\",\n    Red = \"#ff3b30\",\n    TealBlue = \"#5ac8fa\",\n    Blue = \"#007aff\",\n    Green = \"#4cd964\",\n    Black = \"#000000\",\n    White = \"#ffffff\",\n}\n\n/**\n * Get a Color-tint based on the percentage\n * @param   {Colors}    color       A color from the ColorsEnum\n * @param   {number}    percentage  Percentage should be between 1 and 100!\n */\nexport const getTint = (color: Colors, percentage: number): string => {\n    const p = percentage < 1 ? percentage * 100 : percentage;\n    const colorInst = colord(color);\n    const redTints = colorInst.tints(100).map((c) => c.toHex());\n    return redTints.reverse()[Math.round(p - 1)];\n};\n","export type ScrollerObserver = (district: string) => void;\n\nclass Scroller {\n    private observers: ScrollerObserver[] = [];\n\n    public attach(observer: ScrollerObserver) {\n        this.observers.push(observer);\n    }\n\n    public detach(observerToRemove: ScrollerObserver) {\n        this.observers = this.observers.filter((observer) => observerToRemove !== observer);\n    }\n\n    public onScrollStateChange(district: string) {\n        this.notify(district);\n    }\n\n    private notify(district: string) {\n        this.observers.forEach((observer) => observer(district));\n    }\n}\n\nconst scroller = new Scroller();\nexport default scroller;\n","import \"../style/ScrollStepComponent.scss\";\nimport { useEffect, useState } from \"react\";\nimport { districts, prevAll } from \"../utils/Helper\";\nimport scroller, { ScrollerObserver } from \"../utils/Scroller\";\nimport { Link } from \"react-scroll\";\n\nconst ScrollStepComponent = (): JSX.Element => {\n    const [getDistrict, setDistrict] = useState<string>(\"\");\n    const [getState, setState] = useState<string>(\"\");\n\n    useEffect(() => {\n        scroller.onScrollStateChange(getState);\n    }, [getDistrict, getState]);\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".left\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n\n        const element: HTMLDivElement = document.getElementById(getState) as HTMLDivElement;\n\n        if (element !== null) {\n            steps.forEach((e: HTMLDivElement) => {\n                e.classList.replace(\"current\", \"prev\");\n            });\n\n            element.classList.add(\"current\");\n            prevAll(element)\n                .slice(1)\n                .forEach((e) => e.classList.add(\"prev\"));\n        }\n    }, [getState]);\n\n    const onStateChange: ScrollerObserver = (district: string) => {\n        setState(district);\n    };\n\n    useEffect(() => {\n        scroller.attach(onStateChange);\n        return () => scroller.detach(onStateChange);\n    });\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".left\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n\n        steps.forEach((element: HTMLDivElement) =>\n            element.addEventListener(\"click\", () => {\n                setDistrict(element.id);\n            })\n        );\n    });\n\n    return (\n        <div className={\"outer\"}>\n            <div className={\"progress\"}>\n                <div className={\"left\"}>\n                    {districts.map((value: string, index: number) => {\n                        const offset = -document.documentElement.clientHeight * 0.21;\n                        if (index === 1) {\n                            return (\n                                <div id={value} className={\"current\"}>\n                                    <Link to={value + \"-view\"} smooth={true} spy={true} offset={offset}>\n                                        {value}\n                                    </Link>\n                                </div>\n                            );\n                        } else {\n                            return (\n                                <div id={value} className={\"current\"}>\n                                    <Link to={value + \"-view\"} smooth={true} spy={true} offset={offset}>\n                                        {value}\n                                    </Link>\n                                </div>\n                            );\n                        }\n                    })}\n                </div>\n                <div className={\"right\"}>\n                    {districts.map((_, index: number) => {\n                        return <div key={index} />;\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollStepComponent;\n","import \"../style/TimeLineComponent.scss\";\nimport { useEffect } from \"react\";\nimport { prevAll } from \"../utils/Helper\";\n\nconst DistrictComponent = (): JSX.Element => {\n    const onHover = (el: HTMLDivElement, steps: HTMLDivElement[]): void => {\n        steps.forEach((element: HTMLDivElement) => {\n            element.classList.replace(\"current\", \"prev\");\n        });\n        el.classList.add(\"current\");\n        prevAll(el)\n            .slice(1)\n            .forEach((element) => element.classList.add(\"prev\"));\n    };\n\n    useEffect(() => {\n        const progressElement: HTMLDivElement = document.querySelector(\".timeline-progress\") as HTMLDivElement;\n        const label: HTMLDivElement = progressElement.querySelector(\".below\") as HTMLDivElement;\n        const steps: HTMLDivElement[] = [...(label.childNodes as NodeListOf<HTMLDivElement>)];\n        steps.forEach((element: HTMLDivElement) =>\n            element.addEventListener(\"click\", () => {\n                onHover(element, steps);\n            })\n        );\n    });\n\n    return (\n        <div className={\"timeline-outer\"}>\n            <div className={\"timeline-progress\"}>\n                <div className={\"above\"}>\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                    <div />\n                </div>\n                <div className={\"below\"}>\n                    <div className={\"current\"}>\n                        <p>1980</p>\n                    </div>\n                    <div>\n                        <p>1984</p>\n                    </div>\n                    <div>\n                        <p>1988</p>\n                    </div>\n                    <div>\n                        <p>1992</p>\n                    </div>\n                    <div>\n                        <p>1996</p>\n                    </div>\n                    <div>\n                        <p>2000</p>\n                    </div>\n                    <div>\n                        <p>2004</p>\n                    </div>\n                    <div>\n                        <p>2008</p>\n                    </div>\n                    <div>\n                        <p>2012</p>\n                    </div>\n                    <div>\n                        <p>2016</p>\n                    </div>\n                    <div>\n                        <p>2020</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DistrictComponent;\n","import { useEffect, useState } from \"react\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport ScrollStepComponent from \"./ScrollStepComponent\";\nimport \"../style/ScrollComponent.scss\";\nimport TimeLineComponent from \"./TimeLineComponent\";\nimport scroller, { ScrollerObserver } from \"../utils/Scroller\";\nimport { districts } from \"../utils/Helper\";\n\ninterface IState {\n    data: string;\n    steps: string[];\n    progress: number;\n}\n\nconst ScrollComponent = (props: { mapComponent: JSX.Element }): JSX.Element => {\n    const initialState: IState = {\n        data: \"\",\n        steps: districts,\n        progress: 0,\n    };\n\n    const [getState, setGetState] = useState<IState>(initialState);\n\n    const onStateChange: ScrollerObserver = (district: string) => {\n        setGetState((state: IState) => {\n            return { ...state, data: district };\n        });\n    };\n\n    useEffect(() => {\n        scroller.attach(onStateChange);\n        return () => scroller.detach(onStateChange);\n    });\n\n    const onStepEnter = (e) => {\n        const { data } = e;\n        scroller.onScrollStateChange(data);\n    };\n\n    const onStepExit = ({ direction, data }) => {\n        if (direction === \"up\" && data === getState.steps[0]) {\n            setGetState((state: IState) => {\n                return { ...state, data: \"\" };\n            });\n        }\n    };\n\n    const onStepProgress = ({ progress }) => {\n        setGetState((state: IState) => {\n            return { ...state, progress: progress };\n        });\n    };\n\n    return (\n        <div>\n            <div id={\"main-component\"} style={{ display: \"block\" }}>\n                <div className=\"graphic-container\">\n                    <div className=\"district\">\n                        <ScrollStepComponent />\n                    </div>\n                    <div className=\"scroller\">\n                        <Scrollama\n                            onStepEnter={onStepEnter}\n                            onStepExit={onStepExit}\n                            progress\n                            order\n                            onStepProgress={onStepProgress}\n                            offset=\"0.23\"\n                        >\n                            {getState.steps.map((value: string) => {\n                                return (\n                                    <Step data={value} key={value}>\n                                        <div id={value + \"-view\"} className={\"step\"}>\n                                            <p>{value}</p>\n                                        </div>\n                                    </Step>\n                                );\n                            })}\n                        </Scrollama>\n                    </div>\n                    <div className=\"graphic\">\n                        <div className=\"map\">{props.mapComponent}</div>\n                    </div>\n                </div>\n                <div id={\"timeline-component\"} className=\"timeline\">\n                    <TimeLineComponent />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollComponent;\n","import data from \"../data/data.json\";\nimport { parseDate } from \"./Helper\";\n\nexport interface IDataEntry {\n    AGS: number;\n    municipality: string;\n    total: number;\n    date: string;\n    living: number;\n    living_percent: number;\n    industry: number;\n    industry_percent: number;\n    transport_infrastructure: number;\n    transport_infrastructure_percent: number;\n    nature_and_water: number;\n    nature_and_water_percent: number;\n    miscellaneous: number;\n    miscellaneous_percent: number;\n    used_area: number;\n    used_area_percent: number;\n    demographic: number;\n}\n\nconst literal = <L extends string | number | boolean>(l: L) => l;\n\nexport const GroupBy = {\n    municipality: literal(\"municipality\"),\n    AGS: literal(\"AGS\"),\n};\n\n/**\n * Group list of object base on keys\n */\n\nexport const groupBy =\n    (key: string) =>\n    (array: IDataEntry[]): { [p: number]: IDataEntry[] } =>\n        array.reduce(\n            (objectsByKeyValue, obj: IDataEntry) => ({\n                ...objectsByKeyValue,\n                [obj[key]]: (objectsByKeyValue[obj[key]] || []).concat(obj),\n            }),\n            {}\n        );\n\nexport type GroupByTypes = typeof GroupBy[keyof typeof GroupBy];\n\nclass DataLoader {\n    private readonly groupByKey: string;\n\n    private readonly groupByKeyFunction;\n\n    constructor(groupByKey: GroupByTypes) {\n        this.groupByKey = groupByKey.toString();\n        this.groupByKeyFunction = groupBy(this.groupByKey);\n    }\n\n    /**\n     * Return the districts from the dataset as a grouped object\n     * @return  { [p: string | number]: IDataEntry[] }    Dictionary with grouped IDataEntry lists\n     */\n\n    GetDistricts = (): {\n        data: IDataEntry[];\n        groupBy: () => { [p: string | number]: IDataEntry[] };\n        getDataForYear: (year: number) => IDataEntry[];\n    } => {\n        const districts = data.filter((entry: IDataEntry) => entry.AGS.toString().length == 2);\n\n        const groupByFunc = () => {\n            return this.groupByKeyFunction(districts);\n        };\n\n        const getDataForYear = (year: number): IDataEntry[] => {\n            return this.GetDataForYear(year, districts);\n        };\n\n        return { data: districts, groupBy: groupByFunc, getDataForYear: getDataForYear };\n    };\n    /**\n     * Return teh government districts from the dataset as a grouped object\n     * @return  { [p: string | number]: IDataEntry[] }    Dictionary with grouped IDataEntry lists\n     */\n\n    GetGovernmentDistricts = (): {\n        data: IDataEntry[];\n        groupBy: () => { [p: string | number]: IDataEntry[] };\n        getDataForYear: (year: number) => IDataEntry[];\n    } => {\n        const governmentDistricts = data.filter((entry: IDataEntry) => entry.AGS.toString().length == 4);\n\n        const groupByFunc = () => {\n            return this.groupByKeyFunction(governmentDistricts);\n        };\n\n        const getDataForYear = (year: number): IDataEntry[] => {\n            return this.GetDataForYear(year, governmentDistricts);\n        };\n\n        return { data: governmentDistricts, groupBy: groupByFunc, getDataForYear: getDataForYear };\n    };\n\n    GetAll = (): IDataEntry[] => {\n        return data;\n    };\n\n    GetDataForYear = (year: number, dataSet: IDataEntry[]): IDataEntry[] => {\n        const groupByYearFunction = groupBy(\"date\");\n        const tempData: { [p: string | number]: IDataEntry[] } = groupByYearFunction(dataSet);\n        const keys = Object.keys(tempData);\n        const currentKey: string = keys.find((key) => parseDate(key).getFullYear() === year) as string;\n        return tempData[currentKey];\n    };\n}\n\nexport default DataLoader;\n","import landkreise from \"../data/landkreise.json\";\nimport regierungsbezirke from \"../data/regierungsbezirke.json\";\nimport { GeoJSON, MapContainer, useMap } from \"react-leaflet\";\nimport { Feature, FeatureCollection } from \"geojson\";\nimport L, { Browser, Layer } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { RefObject, useCallback, useMemo, useRef, useState } from \"react\";\nimport DataLoader, { groupBy, GroupBy, IDataEntry } from \"../utils/DataLoader\";\nimport { Colors, getTint } from \"../utils/Colors\";\nimport { LayerTypes } from \"../utils/Helper\";\n\nconst InteractiveMap: () => JSX.Element = () => {\n    const [getRBGeoJson] = useState(regierungsbezirke as FeatureCollection);\n\n    //const [getLKGeoJson] = useState(landkreise as FeatureCollection);\n\n    function GeoContainer({ year }: { year: number }) {\n        const geoJsonRef = useRef<L.GeoJSON>(null);\n        const map = useMap();\n        const groupByAGSFunc = groupBy(GroupBy.AGS);\n        const [getDataRB] = useState<{ [p: string | number]: IDataEntry[] }>(\n            groupByAGSFunc(new DataLoader(GroupBy.AGS).GetDistricts().getDataForYear(year))\n        );\n        const [getDataLK] = useState<{ [p: string | number]: IDataEntry[] }>(\n            groupByAGSFunc(new DataLoader(GroupBy.AGS).GetGovernmentDistricts().getDataForYear(year))\n        );\n\n        const [minRB, maxRB] = useMemo(() => {\n            let minValue = Infinity;\n            let maxValue = -Infinity;\n            Object.values(getDataRB)\n                .flat(1)\n                .forEach((dataEntry) => {\n                    const value = dataEntry.used_area_percent;\n                    minValue = minValue > value ? value : minValue;\n                    maxValue = maxValue < value ? value : maxValue;\n                });\n            return [0, maxValue];\n        }, [getDataRB]);\n\n        const [minLK, maxLK] = useMemo(() => {\n            let minValue = Infinity;\n            let maxValue = -Infinity;\n            Object.values(getDataLK)\n                .flat(1)\n                .forEach((dataEntry) => {\n                    const value = dataEntry.used_area_percent;\n                    minValue = minValue > value ? value : minValue;\n                    maxValue = maxValue < value ? value : maxValue;\n                });\n            return [0, maxValue];\n        }, [getDataLK]);\n\n        const colorize = useCallback(\n            (feature, layer = LayerTypes.Regierungsbezirk) => {\n                const getData: { [p: string | number]: IDataEntry[] } =\n                    layer === LayerTypes.Regierungsbezirk ? getDataRB : getDataLK;\n\n                const data = Object.values(getData).flat(1);\n                const AGS: number = parseInt(feature.properties.AGS);\n\n                const [minValue, maxValue] = layer === LayerTypes.Regierungsbezirk ? [minRB, maxRB] : [minLK, maxLK];\n\n                const percentage = Math.round(\n                    (((data.find((dataEntry: IDataEntry) => dataEntry.AGS === AGS) as IDataEntry).used_area_percent -\n                        minValue) *\n                        100) /\n                        (maxValue - minValue)\n                );\n\n                const color = getTint(Colors.Red, percentage);\n                return {\n                    fillColor: color,\n                    fillOpacity: 1,\n                    color: Colors.White,\n                    weight: 1,\n                };\n            },\n            [getDataLK, getDataRB, minLK, minRB, maxLK, maxRB]\n        );\n\n        const lastClickedLayer = useRef<Layer>();\n        const lastDetailedLayerGroup = useRef<L.LayerGroup>();\n\n        const onEachFeature = useCallback(\n            (feature: Feature, layer: Layer, t: LayerTypes): void => {\n                layer.on({\n                    click: (event) => {\n                        const geoJsonMapObj: L.GeoJSON = (geoJsonRef as RefObject<L.GeoJSON>).current as L.GeoJSON;\n                        if (lastClickedLayer.current) {\n                            geoJsonMapObj.resetStyle(lastClickedLayer.current);\n                        }\n                        if (lastDetailedLayerGroup.current) {\n                            geoJsonMapObj.removeLayer(lastDetailedLayerGroup.current);\n                        }\n                        if (lastClickedLayer.current === layer || t === LayerTypes.Landkreis) {\n                            // Unselect if layer is clicked again\n                            map.flyToBounds(geoJsonMapObj.getBounds(), {\n                                duration: 0.5,\n                                easeLinearity: 0.1,\n                                padding: [10, 10],\n                                paddingBottomRight: [0, 20],\n                            });\n                            geoJsonMapObj.resetStyle(lastClickedLayer.current);\n                            lastClickedLayer.current = undefined;\n                            if (!Browser.ie && !Browser.opera && !Browser.edge) {\n                                event.target.bringToBack();\n                            }\n                        } else {\n                            if (t === LayerTypes.Regierungsbezirk) {\n                                // Select if nothing is selected\n                                lastClickedLayer.current = layer;\n                                map.flyToBounds(event.target.getBounds(), {\n                                    duration: 0.5,\n                                    padding: [10, 10],\n                                    easeLinearity: 0.1,\n                                });\n\n                                event.target.setStyle({\n                                    weight: 5,\n                                    color: Colors.Black,\n                                });\n\n                                const firstNum = parseInt(feature.properties?.AGS);\n                                const selectedLKData = landkreise.features.filter((f) => {\n                                    return Math.trunc(Number(f.properties.AGS) / 100) === firstNum;\n                                });\n                                const newGeoJsonLK = {\n                                    type: \"FeatureCollection\",\n                                    features: selectedLKData,\n                                };\n                                const newGeoJsonLayer = new L.GeoJSON(newGeoJsonLK as FeatureCollection, {\n                                    style: (fea) => colorize(fea, LayerTypes.Landkreis),\n                                    onEachFeature: (f, l) => onEachFeature(f, l, LayerTypes.Landkreis),\n                                });\n\n                                const layerGroup = new L.LayerGroup();\n                                layerGroup.addTo(geoJsonMapObj);\n                                layerGroup.addLayer(newGeoJsonLayer);\n                                lastDetailedLayerGroup.current = layerGroup;\n\n                                if (!Browser.ie && !Browser.opera && !Browser.edge) {\n                                    newGeoJsonLayer.bringToFront();\n                                }\n                            }\n                        }\n                    },\n                });\n            },\n\n            [map, colorize]\n        );\n\n        return (\n            <GeoJSON\n                data={getRBGeoJson}\n                onEachFeature={(l, f) => onEachFeature(l, f, LayerTypes.Regierungsbezirk)}\n                style={(feature) => colorize(feature)}\n                ref={geoJsonRef}\n            />\n        );\n    }\n\n    return (\n        <MapContainer\n            zoomSnap={0}\n            zoomDelta={0.25}\n            zoom={6.510095625452387}\n            center={[49.00380582838273, 11.407993529123203]}\n            style={{\n                height: \"100%\",\n                width: \"100%\",\n                background: Colors.White,\n                border: \"2px solid rgba(0,0,0,0.2)\",\n                borderRadius: \"4px\",\n                backgroundClip: \"padding-box\",\n            }}\n            whenCreated={(m: L.Map) => {\n                m.fitBounds(m.getBounds());\n                m.invalidateSize();\n            }}\n            zoomAnimation={true}\n            fadeAnimation={true}\n        >\n            <GeoContainer year={1980} />\n        </MapContainer>\n    );\n};\nexport default InteractiveMap;\n","import \"../style/WelcomeComponent.scss\";\nimport { Link } from \"react-scroll\";\n\nconst WelcomeComponent = (): JSX.Element => {\n    return (\n        <div className={\"welcome\"}>\n            <div className={\"title-container\"}>\n                <p className={\"title\"}>Betonwüste</p>\n                <p className={\"subtitle\"}>Flächenverbrauch Bayerns in Zahlen</p>\n            </div>\n            <Link to={\"main-component\"} smooth={true} spy={true}>\n                <div className={\"mouse-scroll\"}>\n                    <div className={\"mouse\"}>\n                        <div className={\"mouse-in\"} />\n                    </div>\n                    <div>\n                        <span className={\"down-arrow-1\"} />\n                        <span className={\"down-arrow-2\"} />\n                        <span className={\"down-arrow-3\"} />\n                    </div>\n                </div>\n            </Link>\n        </div>\n    );\n};\n\nexport default WelcomeComponent;\n","import ScrollComponent from \"./components/ScrollComponent\";\nimport InteractiveMap from \"./components/InteractiveMap\";\nimport WelcomeComponent from \"./components/WelcomeComponent\";\n\nfunction App(): JSX.Element {\n    return (\n        <>\n            <WelcomeComponent />\n            <ScrollComponent mapComponent={<InteractiveMap />} />\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./report-web-vitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}